{"version":3,"sources":["App.module.css","reportWebVitals.ts","redux/counterReducer.ts","redux/store.ts","components/Customization.tsx","common/Button.tsx","components/EnterCustomization.tsx","components/Settings.tsx","common/Info.tsx","components/InformationPanel.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","startValue","maxValue","value","rootReducer","combineReducers","counter","state","action","type","newStartValue","newMaxValue","newValue","store","createStore","window","Customization","React","memo","props","useState","setStartValue","setMaxValue","localStartValue","Number","localStorage","getItem","localMaxValue","useEffect","startValueSuccess","maxValueSuccess","className","s","customization","disabledMax","inputError","input","onChange","e","currentTarget","valueAsNumber","disabledStart","Button","disabled","button","onClick","children","EnterCustomization","enterCuztomization","valueSuccess","Settings","settings","Info","disabledInc","errorInfo","info","error","workingValue","InformationPanel","setWorkingValue","setDisabledIncButton","valueLocalStorage","controlInformationPanel","control","App","dispatch","useDispatch","useSelector","disabledStartValue","setDisabledStartValue","disabledMaxValue","setDisabledMaxValue","appWrapper","settingsBlock","changeStartValueAC","changeMaxValueAC","setItem","String","informationPanelBlock","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f99fa6e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__lWXZ_\",\"settingsBlock\":\"App_settingsBlock__102yi\",\"informationPanelBlock\":\"App_informationPanelBlock__15vpt\",\"settings\":\"App_settings__Mrama\",\"controlInformationPanel\":\"App_controlInformationPanel__1tYvr\",\"customization\":\"App_customization__3ksMI\",\"maxValue\":\"App_maxValue__1I9Q5\",\"startValue\":\"App_startValue___b9_T\",\"enterCuztomization\":\"App_enterCuztomization__3rsia\",\"info\":\"App_info__3GtoI\",\"errorInfo\":\"App_errorInfo__2JFKC\",\"control\":\"App_control__jPM51\",\"button\":\"App_button__1UJJD\",\"input\":\"App_input__1_sva\",\"inputError\":\"App_inputError__1-neO\",\"error\":\"App_error__35SLN\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type stateType = {\r\n    startValue: number\r\n    maxValue: number\r\n    value: number\r\n}\r\n\r\nexport type ChangeStartValueActionType = {\r\n    type: 'CHANGE-START-VALUE'\r\n    newStartValue: number\r\n}\r\nexport type ChangeMaxValueActionType = {\r\n    type: 'CHANGE-MAX-VALUE'\r\n    newMaxValue: number\r\n}\r\nexport type ChangeValueActionType = {\r\n    type: 'CHANGE-VALUE'\r\n    newValue: number\r\n}\r\n\r\nexport type ActionsType = ChangeStartValueActionType | ChangeMaxValueActionType | ChangeValueActionType\r\n\r\nconst initialState: stateType = {\r\n    startValue: 0,\r\n    maxValue: 0,\r\n    value: 0,\r\n\r\n}\r\nexport const counterReducer = (state: stateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'CHANGE-START-VALUE': {\r\n            return {...state, startValue: action.newStartValue}\r\n        }\r\n        case 'CHANGE-MAX-VALUE': {\r\n            return {...state, maxValue: action.newMaxValue}\r\n        }\r\n        case 'CHANGE-VALUE': {\r\n            return {...state, value: action.newValue}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const changeStartValueAC = (newStartValue: number) => {\r\n    return {type: 'CHANGE-START-VALUE', newStartValue}\r\n}\r\nexport const changeMaxValueAC = (newMaxValue: number) => {\r\n    return {type: 'CHANGE-MAX-VALUE', newMaxValue}\r\n}\r\nexport const changeValueAC = (newValue: number) => {\r\n    return {type: 'CHANGE-VALUE', newValue}\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from '../App.module.css';\r\n\r\ntype CustomizationPropsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    startValueSuccess: (propStartValue: number) => void\r\n    maxValueSuccess: (propMaxValue: number) => void\r\n    disabledMax?: boolean\r\n    disabledStart?: boolean\r\n}\r\n\r\nconst Customization = React.memo((props: CustomizationPropsType) => {\r\n\r\n    const [startValue, setStartValue] = useState(props.startValue)\r\n    const [maxValue, setMaxValue] = useState(props.maxValue)\r\n    const localStartValue = Number(localStorage.getItem(\"startValue\"))\r\n    const localMaxValue = Number(localStorage.getItem(\"maxValue\"))\r\n\r\n    useEffect(() => {\r\n        setStartValue(Number(localStorage.getItem(\"startValue\")))\r\n        setMaxValue(Number(localStorage.getItem(\"maxValue\")))\r\n        props.startValueSuccess(localStartValue)\r\n        props.maxValueSuccess(localMaxValue)\r\n    }, [])\r\n\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStartValue(e.currentTarget.valueAsNumber)\r\n        props.startValueSuccess(e.currentTarget.valueAsNumber)\r\n    }\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMaxValue(e.currentTarget.valueAsNumber)\r\n        props.maxValueSuccess(e.currentTarget.valueAsNumber)\r\n    }\r\n    return <div className={s.customization}>\r\n        <div className={s.maxValue}><h3>\r\n            max value: <input className={props.disabledMax ? s.inputError : s.input}\r\n                              value={maxValue}\r\n                              type={'number'}\r\n                              onChange={onChangeMaxValue}/>\r\n        </h3></div>\r\n        <div className={s.startValue}><h3>\r\n            start value: <input className={props.disabledStart ? s.inputError : s.input}\r\n                                value={startValue}\r\n                                type={'number'}\r\n                                onChange={onChangeStartValue}/>\r\n        </h3>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default Customization;","import React from 'react';\r\nimport s from '../App.module.css';\r\n\r\n\r\ntype ButtonPropsType = {\r\n    onClick: () => void\r\n    children?: string\r\n    disabled?: boolean\r\n}\r\n\r\nconst Button = React.memo((props: ButtonPropsType) => {\r\n    return <div>\r\n        <button disabled={props.disabled} className={s.button} onClick={props.onClick}>{props.children}</button>\r\n    </div>\r\n})\r\n\r\nexport default Button;","import React from 'react';\r\nimport s from '../App.module.css';\r\nimport Button from \"../common/Button\";\r\n\r\ntype EnterCustomizationPropsType = {\r\n    valueSuccess: () => void\r\n    disabledMax?: boolean\r\n    disabledStart?: boolean\r\n}\r\n\r\nconst EnterCustomization = React.memo((props: EnterCustomizationPropsType) => {\r\n        const disabled = props.disabledMax === true || props.disabledStart === true\r\n        return <div className={s.enterCuztomization}>\r\n            <Button onClick={() => props.valueSuccess()} disabled={disabled}>Set</Button>\r\n        </div>\r\n    }\r\n)\r\n\r\nexport default EnterCustomization;","import React from 'react';\r\nimport Customization from \"./Customization\";\r\nimport EnterCustomization from \"./EnterCustomization\";\r\nimport s from '../App.module.css';\r\n\r\n\r\ntype SettingsPropsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    startValueSuccess: (propStartValue: number) => void\r\n    maxValueSuccess: (propMaxValue: number) => void\r\n    valueSuccess: () => void\r\n    disabledMax?: boolean\r\n    disabledStart?: boolean\r\n}\r\n\r\nconst Settings = React.memo((props: SettingsPropsType) => {\r\n    return <div className={s.settings}>\r\n        <Customization maxValue={props.maxValue}\r\n                       startValue={props.startValue}\r\n                       startValueSuccess={props.startValueSuccess}\r\n                       maxValueSuccess={props.maxValueSuccess}\r\n                       disabledMax={props.disabledMax}\r\n                       disabledStart={props.disabledStart}\r\n        />\r\n        <EnterCustomization valueSuccess={props.valueSuccess}\r\n                            disabledMax={props.disabledMax}\r\n                            disabledStart={props.disabledStart}/>\r\n    </div>\r\n})\r\n\r\nexport default Settings;","import React from 'react';\r\nimport s from '../App.module.css';\r\n\r\n\r\ntype ErrorMessagePropType = {\r\n    disabledInc: boolean,\r\n    disabledMax?: boolean,\r\n    disabledStart?: boolean,\r\n    workingValue: number\r\n}\r\n\r\nconst Info = (props: ErrorMessagePropType) => {\r\n    return <div className={props.disabledInc ? s.errorInfo : s.info}>\r\n        {props.disabledMax ?\r\n            <div className={s.error}>Максимальное значение не может быть меньше или равно\r\n                начальному</div> : props.disabledStart ?\r\n                <div className={s.error}>Начальное значение не может быть меньше нуля, а также больше либо равно\r\n                    максимальному значению</div> : <h1>{props.workingValue}</h1>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Info;","import React, {useEffect, useState} from 'react';\r\nimport Button from \"../common/Button\";\r\nimport Info from \"../common/Info\";\r\nimport s from '../App.module.css';\r\n\r\n\r\ntype InformationPanelType = {\r\n    value: number\r\n    maxValue: number\r\n    disabled?: boolean\r\n    disabledMax?: boolean\r\n    disabledStart?: boolean\r\n}\r\n\r\nconst InformationPanel = React.memo((props: InformationPanelType) => {\r\n    const [workingValue, setWorkingValue] = useState(props.value)\r\n    const [disabledInc, setDisabledIncButton] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setWorkingValue(props.value)\r\n    }, [props.value])\r\n\r\n    useEffect(() => {\r\n        if (workingValue !== valueLocalStorage) {\r\n            setWorkingValue(valueLocalStorage)\r\n        }\r\n    }, [])\r\n\r\n    let valueLocalStorage = Number(localStorage.getItem(\"startValue\"))\r\n\r\n    const Increment = () => {\r\n        if (props.maxValue >= workingValue + 1) {\r\n            setWorkingValue(workingValue + 1)\r\n        }\r\n        if (props.maxValue - 1 === workingValue) {\r\n            setDisabledIncButton(true)\r\n        }\r\n    }\r\n    const Reset = () => {\r\n        setWorkingValue(valueLocalStorage)\r\n        setDisabledIncButton(false)\r\n    }\r\n    let disabled = props.disabledMax || props.disabledStart || disabledInc;\r\n\r\n    return <div className={s.controlInformationPanel}>\r\n        <Info disabledInc={disabledInc} disabledStart={props.disabledStart} disabledMax={props.disabledMax} workingValue={workingValue}/>\r\n        <div className={s.control}>\r\n            <Button onClick={Increment} disabled={disabled}>Inc</Button>\r\n            <Button onClick={Reset}>Reset</Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default InformationPanel;","import React, {useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Settings from \"./components/Settings\";\nimport InformationPanel from \"./components/InformationPanel\";\nimport {changeMaxValueAC, changeStartValueAC, changeValueAC, stateType} from \"./redux/counterReducer\";\nimport {RootStateType} from './redux/store';\nimport s from './App.module.css';\n\n\nconst App = () => {\n\n    const dispatch = useDispatch();\n    const state = useSelector<RootStateType, stateType>(state => state.counter)\n    const [disabledStartValue, setDisabledStartValue] = useState(false)\n    const [disabledMaxValue, setDisabledMaxValue] = useState(false)\n\n    const startValueSuccess = (newStartValue: number) => {\n        if (newStartValue < 0) {\n            setDisabledStartValue(true)\n        }\n        if (newStartValue >= state.maxValue) {\n            setDisabledStartValue(true)\n        }\n        if (newStartValue >= 0 && newStartValue < state.maxValue) {\n            setDisabledStartValue(false)\n            setDisabledMaxValue(false)\n        }\n        dispatch(changeStartValueAC(newStartValue))\n    };\n    const maxValueSuccess = (newMaxValue: number) => {\n        if (newMaxValue <= state.startValue) {\n            setDisabledMaxValue(true)\n        }\n        if (newMaxValue > state.startValue) {\n            setDisabledMaxValue(false)\n            setDisabledStartValue(false)\n        }\n        dispatch(changeMaxValueAC(newMaxValue))\n    };\n    const valueSuccess = () => {\n        dispatch(changeValueAC(state.startValue))\n        localStorage.setItem(\"startValue\", String(state.startValue))\n        localStorage.setItem(\"maxValue\", String(state.maxValue))\n    };\n    return <div className={s.appWrapper}>\n        <div className={s.settingsBlock}>\n            <Settings maxValue={state.maxValue}\n                      startValue={state.startValue}\n                      startValueSuccess={startValueSuccess}\n                      maxValueSuccess={maxValueSuccess}\n                      valueSuccess={valueSuccess}\n                      disabledMax={disabledMaxValue}\n                      disabledStart={disabledStartValue}\n            />\n        </div>\n        <div className={s.informationPanelBlock}>\n            <InformationPanel value={state.value}\n                              maxValue={state.maxValue}\n                              disabledMax={disabledMaxValue}\n                              disabledStart={disabledStartValue}/>\n        </div>\n    </div>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/store';\nimport App from \"./App\";\nimport './index.module.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}